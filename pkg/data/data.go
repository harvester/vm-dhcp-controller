// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package data generated by go-bindata.// sources:
// chart/crds/network.harvesterhci.io_ippools.yaml
// chart/crds/network.harvesterhci.io_virtualmachinenetworkconfigs.yaml
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chartCrdsNetworkHarvesterhciIo_ippoolsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\x5d\x6f\xe3\xc6\xf1\x5d\xbf\x62\x8a\x3e\x38\x01\x4c\x19\x87\x14\x45\x21\xe0\xd0\x3a\xb2\x9a\x08\x71\x1d\x43\xb2\xaf\x08\x8a\x3e\x8c\xb8\x23\x69\xe3\xe5\x2e\xb3\x1f\xb2\xdd\x5c\xfe\x7b\x31\x4b\xd2\xa2\x28\x92\xa6\x75\x77\x41\xf6\x49\x9a\xdd\x9d\xef\x99\x9d\x19\x26\x49\x32\xc2\x5c\x7e\x20\xeb\xa4\xd1\x13\xc0\x5c\xd2\x93\x27\xcd\xff\xdc\xf8\xe1\x6f\x6e\x2c\xcd\xc5\xee\xdd\xe8\x41\x6a\x31\x81\x69\x70\xde\x64\x0b\x72\x26\xd8\x94\xae\x68\x2d\xb5\xf4\xd2\xe8\x51\x46\x1e\x05\x7a\x9c\x8c\x00\x50\x6b\xe3\x91\xc1\x8e\xff\x02\xfc\xfa\xdb\x08\x40\x63\x46\x13\x90\x79\x6e\x8c\x72\x63\x4d\xfe\xd1\xd8\x87\xf1\x16\xed\x8e\x9c\x27\xbb\x4d\xe5\x58\x9a\x91\xcb\x29\xe5\x4b\x1b\x6b\x42\x3e\x81\xae\x63\x05\xba\x12\x7d\xc1\xda\xfc\xf6\xd6\x18\x15\x01\x4a\x3a\xff\x43\x0d\x78\x2d\x9d\x8f\x1b\xb9\x0a\x16\xd5\x0b\x17\x11\xe6\xb6\xc6\xfa\x9b\x3d\xb6\x84\x77\x55\xed\x67\x79\x4c\xea\x4d\x50\x68\xab\xcb\x23\x00\x97\x9a\x9c\x26\x10\xef\xe6\x98\x92\x18\x01\xec\x0a\x3d\x46\x5c\x09\xa0\x10\x51\x3d\xa8\x6e\xad\xd4\x9e\xec\xd4\xa8\x90\xe9\x17\x4a\x3f\x3b\xa3\x6f\xd1\x6f\x27\x30\x66\xc1\x2b\xad\x30\xc6\x78\xa2\xd2\xda\xcd\xec\xee\xdf\x3f\x2e\x7e\x28\x61\xfe\x99\xc9\x3a\x6f\xa5\xde\xb4\x20\xf2\xe8\x83\x1b\xcb\x7c\xf7\x97\x31\xee\x50\x2a\x5c\xa9\x43\x6c\x97\x1f\x2e\xe7\xd7\x97\xdf\x5e\xcf\x0e\xf0\x31\x7f\x1b\xb2\xfd\x08\x83\x8b\x52\xee\x71\xdd\x2f\x67\x57\x6f\x42\x93\x1a\x5d\xe8\xc4\xfd\xe7\xef\x5f\xfd\x63\xcc\x97\xde\xbf\x3f\x5b\xd0\x46\xb2\x79\x49\x9c\x7d\xfd\xdf\xf2\xe8\x01\x9d\xc5\xec\xbb\xf9\xf2\x6e\xb6\x68\x50\x7b\x45\x09\xed\xc4\xa6\x98\x6e\x69\x41\x28\x9e\x3b\x88\x4d\x2f\xa7\xdf\xcf\x16\xb3\xcb\xab\x9f\x3e\x9d\xd8\xe5\x86\xb4\xef\x23\x76\xf9\xdd\xec\xe6\x6e\x38\xb1\x2a\xd0\xc6\xa9\xa5\x18\x63\x77\x32\x23\xe7\x31\xcb\x9b\x58\x0f\xd0\x09\xf4\x85\x13\x14\xdb\xbb\x77\xa8\xf2\x2d\xbe\x2b\x5c\x3b\xdd\x52\x86\x93\xf2\xbc\xc9\x49\x5f\xde\xce\x3f\x7c\xb3\x3c\x00\x03\xe4\xd6\xe4\x64\xbd\xac\x02\xa5\x58\xb5\xdc\x51\x83\x02\x08\x72\xa9\x95\xb9\x8f\x49\xe5\x63\x72\xb0\x07\xc0\x04\x8a\x5b\x20\x38\x89\x90\x03\xbf\xa5\x2a\x7a\x48\x94\x3c\x81\x59\x83\xdf\x4a\x07\x96\x72\x4b\x8e\x74\x91\x56\x18\x8c\x1a\xcc\xea\x67\x4a\xfd\xb8\x81\x7a\x49\x96\xd1\x70\x5c\x07\x25\x20\x35\x7a\x47\xd6\x83\xa5\xd4\x6c\xb4\xfc\xdf\x0b\x6e\x07\xde\x44\xa2\x0a\x3d\x39\x1f\x1d\xd7\x6a\x54\xb0\x43\x15\xe8\x1c\x50\x8b\x06\xe6\x0c\x9f\xc1\x12\xd3\x84\xa0\x6b\xf8\xe2\x05\xd7\xe4\xe3\x5f\xc6\x12\x48\xbd\x36\x13\xd8\x7a\x9f\xbb\xc9\xc5\xc5\x46\xfa\x2a\xa3\xa6\x26\xcb\x82\x96\xfe\xf9\x22\x35\xda\x5b\xb9\x0a\xde\x58\x77\x21\x68\x47\xea\xc2\xc9\x4d\x82\x36\xdd\x4a\x4f\xa9\x0f\x96\x2e\x30\x97\x49\x14\x44\x47\xff\x1a\x67\xe2\xcf\xb6\xcc\xc1\xee\x80\xec\x91\xef\x14\x2b\x66\xc8\x37\x98\x87\x93\x27\x48\x07\x58\xa2\x2a\x44\xdc\x5b\x81\x41\xac\xba\xc5\x6c\x79\x07\x15\x27\x85\xa5\x0a\xa3\xec\x8f\x1e\xe9\xa5\xb2\x0f\x6b\x53\xea\x35\xd9\xe2\xde\xda\x9a\x2c\xe2\x24\x2d\x72\x23\xb5\x8f\x7f\x52\x25\x49\x7b\x70\x61\x95\x49\xcf\x6e\xf0\x4b\x20\xe7\xd9\x74\x4d\xb4\xd3\xf8\xea\xc0\x8a\x20\xe4\xec\xec\xa2\x79\x60\xae\x61\x8a\x19\xa9\x29\x3a\xfa\x9d\x6d\xc5\x56\x71\x09\x1b\x61\x90\xb5\xea\x6f\x69\xf3\x70\xa1\xde\xda\x46\xf5\x60\xee\x57\x7b\x9c\xf2\xe2\x14\x3e\x35\x7a\x2d\x37\xcd\x9d\xbe\x5b\xbc\x52\x29\x6c\x1b\xbc\x53\x86\xfd\x7a\x4a\x1e\xc2\x8a\xac\x26\x4f\x2e\xd9\xa1\x92\xa2\x5e\x1a\x34\x57\x02\x19\x39\x87\x1b\xce\xc2\xf3\xab\x05\x3b\xa1\xcc\xb2\xe0\x6b\x8f\x58\x73\xd9\xa0\x98\x03\x52\x6b\x78\xff\x1e\x8c\x12\x4b\x52\xeb\x96\xb3\xa2\x8b\xe6\xda\xd8\x0c\xfd\x24\xaa\xa7\xf5\x80\xf4\x94\x75\xdc\x1d\xa0\x80\x0c\x9f\xe6\x11\x01\x7c\xd3\xa3\x41\xb4\x16\x9f\xdb\xb8\x36\x19\x4a\xcd\x15\xc1\x49\xfa\x2f\xae\x2f\x89\x5d\xb4\x1d\xc1\xa7\x09\xd7\xcf\xbc\x22\x74\xc4\x0f\x54\x1f\xef\xf5\x8a\xe1\x70\x69\x9f\x7f\x09\x9e\xf7\x06\x69\x37\x77\xbf\x4c\x5c\xfc\xb5\x93\xee\x0f\x21\x5e\xd4\x4c\xc3\xf5\xf5\xaa\x1b\x0e\x12\x0e\xde\x1c\x72\x70\x18\x76\xb3\x22\xf5\xbf\x16\x75\xf0\x86\xc8\x8b\xa2\x3f\xa5\x2a\x88\x0e\x47\x18\x2c\x7e\xaf\xe1\x61\xa8\x7e\xfa\x0d\x5c\xac\x4f\xd3\x61\x21\xec\x97\xd0\xa3\xf3\x68\xfd\x1f\xde\x89\x96\xcc\xe5\xe7\x17\x9f\xdf\x7f\x69\xa9\x23\x88\x12\x8e\xaf\x8e\x9d\xa8\xb6\x9e\x68\x3f\x7a\x57\xf7\xeb\xe4\x07\xac\x8c\xa4\x8a\x69\x30\x3a\x25\x70\xd4\x4e\xa5\x52\xc3\xd9\x9f\xb6\xe8\xbe\x2a\x95\x30\x2e\xa3\xe6\x6b\xf8\xf8\x11\x18\xee\xea\xc0\xb3\x16\x44\xd6\x04\x4f\x1d\x4f\xf5\xab\xbe\xf1\xe5\xde\xf2\x45\x64\xeb\x73\xbe\xe6\x2e\x96\x91\xf3\xdb\x3f\x9c\xa8\xcb\x92\xb1\xcf\x27\x6c\xb7\xd7\x27\xb1\x30\x6b\x01\xe7\xd5\x28\xe4\x10\x5c\x29\xed\x68\xab\x37\x08\x86\xab\xa2\xd5\xe2\x43\xfc\xbf\xcd\xf7\x0b\x57\x3e\x74\xfd\x12\xd6\xf4\xfc\xda\xdc\xe4\x98\xa9\x0c\x9f\xae\x49\x6f\xb8\x7b\xfe\xeb\xb1\x33\xf4\x3a\xc2\x49\x92\xdf\xec\x99\x79\xcd\x07\x86\xd8\x3f\xc7\xe0\xda\x6c\x5f\x30\xbe\x32\x46\x11\xea\x83\xdd\x76\x7f\x49\xe0\x78\xba\x54\xc7\x74\xdc\x59\xc4\x59\xc5\xd0\xde\x02\x37\xa4\xfd\xad\x11\x0b\x5a\xbf\xb5\xb9\x90\x19\xeb\xed\x94\x30\xd5\xa7\x96\xc5\xba\x9a\xd9\x9d\x74\x3b\xc8\x8e\x17\xa8\xbf\xab\xae\xd6\xfd\xfc\xaa\x68\xae\x99\x0c\xf8\x2d\x7a\xd8\x1a\x25\x1c\x04\x2d\x7f\x09\x04\xf3\xab\x72\xa4\x70\x0e\x52\x73\xaa\xe7\x76\xfb\xfe\x7e\x7e\xe5\xc6\x00\xdf\x52\xca\x0e\x01\x8f\x5d\x39\x45\x18\x7d\xe6\xe1\xc7\x9b\xeb\x9f\x80\xcf\xc5\x7b\xe7\x45\x8f\xcd\x44\x35\xa0\x92\xc5\xf0\xa3\x90\x2f\xe2\x64\x0a\x25\x3f\x29\xe6\xdc\xc7\xba\x0e\xf4\x5c\xad\x6b\x0f\xa8\x05\x6c\x49\xe5\xdc\xc7\x3f\x10\xb8\x60\x4b\x49\x98\x5c\xdc\x8d\x2a\x06\x61\x80\xdb\xf2\x0d\x79\x48\x8d\x5e\xab\xb6\xce\x7c\x80\xce\x7b\xf2\xd3\x7e\xec\x76\x6c\x93\xce\x72\xf1\xb5\x52\x5d\xa1\xf3\x77\x16\xb5\x93\xd5\x88\xad\xab\xec\x39\x30\xf9\x35\x3a\x0f\x5e\x66\x54\x0c\x2f\x2a\xce\xc0\xbf\xa0\x22\x51\x4c\x3a\x8c\x26\x38\x18\x06\xb6\x28\xc4\x00\x6a\xe3\xb7\x64\xdb\x15\x36\xe0\x11\x63\x31\xee\xe3\x38\x64\xb0\x08\x77\x71\x22\xb6\x17\x43\xba\x9a\x1c\x8f\xe8\xba\xc6\x2b\x83\x79\xaa\xf2\xe4\x10\x66\xbe\x0f\x19\xea\xc4\x12\x0a\x4e\xa0\xd5\x55\x90\x5a\xc8\x14\xe3\x14\x4a\x90\x47\xa9\x1c\xe0\xca\x84\xae\xc2\x0a\x4a\x81\x5e\x8c\x70\x2a\xeb\x96\xd0\x35\xe7\x9c\x1d\x9c\xb3\x1a\x8b\xe3\x5c\x8b\x1c\xba\xc3\x99\x6b\x32\x74\xb2\x32\xdb\x72\x74\x07\x47\xcb\x78\xb4\x98\xa8\xd6\x98\x39\x8f\xae\x68\xd6\x70\x67\x03\x9d\xc3\x3f\x51\x39\x3a\x87\x7b\xfd\xa0\xcd\xe3\xe9\x7c\xc5\x03\x83\xf4\xc4\x29\xc7\xac\x21\x55\xc1\x71\xbd\xf0\xc2\xd7\x89\xa4\xfb\x3a\x84\xa4\x3b\xe2\x92\x88\xb7\x65\xa3\xb7\x30\xea\xee\x23\xb9\xee\x7c\xeb\x33\x88\x4a\x99\x94\x43\xab\x5d\x71\xf5\x6f\x49\xaf\xcd\x19\x06\x8e\x6d\x3a\x9b\x9e\x97\xef\x46\xa7\xcd\x6d\xda\x0b\x96\xd7\x6f\xf6\x15\xba\xcd\x4f\x59\xf5\xbd\xda\x57\xa9\x41\x22\xee\xd3\xe2\x31\xa5\xaa\x73\xe0\xdd\x84\x73\xe0\xf0\x8a\xb1\x95\xe2\x11\x30\xd6\xe0\x62\x02\xde\x86\x02\xb7\xf3\xc6\xc6\xc2\x71\x0f\x09\xab\x97\xf1\x7e\xc5\x61\x19\xe9\xf0\xeb\x6f\xa3\xff\x07\x00\x00\xff\xff\x51\x01\x92\x53\xb3\x1d\x00\x00")

func chartCrdsNetworkHarvesterhciIo_ippoolsYamlBytes() ([]byte, error) {
	return bindataRead(
		_chartCrdsNetworkHarvesterhciIo_ippoolsYaml,
		"chart/crds/network.harvesterhci.io_ippools.yaml",
	)
}

func chartCrdsNetworkHarvesterhciIo_ippoolsYaml() (*asset, error) {
	bytes, err := chartCrdsNetworkHarvesterhciIo_ippoolsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chart/crds/network.harvesterhci.io_ippools.yaml", size: 7603, mode: os.FileMode(420), modTime: time.Unix(1708939633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\x1b\x37\x13\xbe\xeb\x57\x0c\xf0\x1e\x92\x00\xde\x35\x8c\xb7\x68\x0b\x01\x46\x6b\x28\x69\x6b\xd4\x4e\x8d\xd8\xf1\xa5\xe8\x61\xb4\x1c\x49\x8c\xb9\xe4\x96\x33\x54\xec\xa6\xf9\xef\x05\xc9\x5d\x6b\xb5\x92\x6c\x45\x48\xcb\xdb\x92\xf3\xf1\xcc\xf7\x6c\x51\x14\x23\x6c\xf4\x2d\x79\xd6\xce\x8e\x01\x1b\x4d\xf7\x42\x36\x7e\x71\x79\xf7\x3d\x97\xda\x1d\x2f\x4f\x46\x77\xda\xaa\x31\x4c\x02\x8b\xab\xdf\x11\xbb\xe0\x2b\x7a\x4d\x33\x6d\xb5\x68\x67\x47\x35\x09\x2a\x14\x1c\x8f\x00\xd0\x5a\x27\x18\xaf\x39\x7e\x02\x7c\xfa\x3c\x02\xb0\x58\xd3\x18\x96\xda\x4b\x40\x53\x63\xb5\xd0\x96\x2c\xc9\x47\xe7\xef\x2a\x67\x67\x7a\xce\x65\xfb\x59\x2e\xd0\x2f\x89\x85\xfc\xa2\xd2\xa5\x76\x23\x6e\xa8\x8a\x92\xe6\xde\x85\x66\x0c\xbb\xc8\xb2\x8e\x56\x67\xc6\x7b\x9b\xd5\x5d\x66\x75\x6f\x33\xe3\x24\xa9\x4b\x54\x46\xb3\xfc\xfa\x1c\xe5\x85\x66\x49\xd4\x8d\x09\x1e\xcd\xd3\x46\x24\x42\x5e\x38\x2f\x6f\x57\x60\x0a\x58\xd6\x96\xa4\x9a\xcd\x07\x9f\x2d\xb9\xb6\xf3\x60\xd0\x3f\x29\x79\x04\xc0\x95\x6b\x68\x0c\x49\x70\x83\x15\xa9\x11\xc0\x32\x07\x2e\x29\x2a\x00\x95\x4a\xf1\x40\x73\xe5\xb5\x15\xf2\x13\x67\x42\x6d\x1f\x61\x7c\x60\x67\xaf\x50\x16\x63\x28\xa3\x53\xcb\x65\x1d\x85\xa5\xc7\x2e\x42\xb7\x97\x6f\xcf\x2e\xdf\xb4\x57\xf2\x10\x15\xb2\x78\x6d\xe7\x5b\x44\x08\x4a\xe0\xb2\x72\x36\x6b\xe5\xdf\x7f\x78\xf9\x63\x19\x79\x4e\x4f\x5f\x9c\x19\xe3\x2a\x14\x52\x2f\x5e\xfd\xd1\x52\xae\xe9\x39\xbb\xb8\xf8\x6d\x72\x76\xf3\xe6\xf5\x5e\xaa\xba\xfc\x2a\x2b\x4f\x29\xb5\x6e\x74\x4d\x2c\x58\x37\xeb\x42\x7f\x5e\x47\xae\x50\xb2\x75\x6d\xf6\x9d\xa0\x69\x16\x78\x92\xbd\x5e\x2d\xa8\xc6\x71\x4b\xef\x1a\xb2\x67\x57\xe7\xb7\xff\xbf\x5e\xbb\x06\x68\xbc\x6b\xc8\x8b\xee\x62\x99\x4f\xaf\x64\x7a\xb7\x00\x8a\xb8\xf2\xba\x91\x54\x4b\x7f\x17\x6b\x6f\x00\x51\x41\xe6\x02\x15\x6b\x87\x18\x64\x41\x5d\x0c\x49\xb5\x98\xc0\xcd\x40\x16\x9a\xc1\x53\xe3\x89\xc9\xe6\x6a\x8a\xd7\x68\xc1\x4d\x3f\x50\x25\xe5\x40\xf4\x35\xf9\x28\x26\xa6\x5e\x30\x0a\x2a\x67\x97\xe4\x05\x3c\x55\x6e\x6e\xf5\x5f\x8f\xb2\x19\xc4\x25\xa5\x06\x85\x58\x20\x65\x89\x45\x03\x4b\x34\x81\x8e\x00\xad\x1a\x48\xae\xf1\x01\x3c\x45\x9d\x10\x6c\x4f\x5e\x62\xe0\x21\x8e\x4b\xe7\x09\xb4\x9d\xb9\x31\x2c\x44\x1a\x1e\x1f\x1f\xcf\xb5\x74\x8d\xa4\x72\x75\x1d\xac\x96\x87\xe3\xca\x59\xf1\x7a\x1a\xc4\x79\x3e\x56\xb4\x24\x73\xcc\x7a\x5e\xa0\xaf\x16\x5a\xa8\x92\xe0\xe9\x18\x1b\x5d\x24\x43\x6c\xca\xae\xb2\x56\xff\xf3\x6d\xeb\xe1\x35\xb5\x1b\xb9\x93\x4f\xea\x01\x5f\x10\x9e\xd8\x09\x40\x33\x60\x2b\x2a\x9b\xb8\x8a\x42\xbc\x8a\xae\x7b\xf7\xe6\xfa\x06\x3a\x24\x39\x52\x39\x28\x2b\xd2\x0d\xbf\x74\xf1\x89\xde\xd4\x76\x46\x3e\xf3\xcd\xbc\xab\x93\x4c\xb2\xaa\x71\xda\x4a\xfa\xa8\x8c\x26\x2b\xc0\x61\x5a\x6b\x89\x69\xf0\x67\x20\x96\x18\xba\xa1\xd8\x49\x6a\xb6\x30\x25\x08\x4d\x4c\x76\x35\x24\x38\xb7\x30\xc1\x9a\xcc\x04\x99\xfe\xe3\x58\xc5\xa8\x70\x11\x83\xb0\x57\xb4\xfa\x23\x64\x48\x9c\xdd\xdb\x7b\xe8\x46\xc2\xea\x6c\xaf\xd3\x78\x6c\xbf\x99\x6f\xbc\x02\x68\xa1\x7a\xcb\xf5\x53\x22\x5b\xc6\xe6\x4c\x29\x4f\xbc\xe3\x19\x60\xe6\x7c\x8d\x32\x06\xdd\x2c\xbf\xd9\x41\xb2\xc3\x19\xab\x53\x63\xf5\x8c\x96\x1a\xef\x2f\xc8\xce\x63\x9f\x3c\xf9\xee\x50\x35\xad\x93\xe2\x38\xd8\x43\xcf\xb7\x07\x9a\x13\x33\x59\x7b\x52\xdb\x54\x14\x3d\x53\xb7\x3e\xf7\x20\x6e\x79\xdf\x91\x28\x8f\xd0\xcf\x53\x94\x61\x13\x78\x66\x44\xef\xf1\x61\xe3\xed\xbe\xb8\x0b\x53\xf2\x96\x84\xb8\x58\xa2\xd1\xaa\xbf\xd7\x0c\xd0\x13\x33\xce\xe3\x7c\xee\xe7\x5b\x2a\x78\x67\xcd\x43\xac\x51\x54\x8a\x86\xed\x35\xb9\x25\x98\x88\xdd\xa8\x6b\x32\xb3\x12\x8d\x79\x79\x7f\x04\xf7\xa0\x2d\x30\x99\xd9\xab\x01\x47\x83\x81\xb7\xb9\x30\x1b\x32\x75\xce\x10\xda\xc1\x6b\x1e\xf4\x9b\x3c\x4f\xc7\xf4\xc9\x68\x1e\xe4\x9b\xdb\xcb\x88\x23\x36\x59\x5d\xd7\x41\x70\x6a\xb6\xc5\x32\xfb\x23\xda\x0e\xa7\xa7\x9d\x5f\xd6\xe8\xb6\x27\x52\x01\x6b\x0b\x4d\xdf\x88\xcd\x0e\x92\x56\x92\x7d\x7b\xc8\x6a\xc7\xf9\x8a\xfd\xc3\x20\xcb\x8d\x47\xcb\xba\xdb\x68\x76\x95\xde\xda\xdc\xba\x40\x16\x10\x5d\x53\x9e\x15\x1d\x32\x90\x47\x51\xa4\xf2\x60\x71\x96\x60\x6d\xf5\xda\x3c\xe2\x00\xad\x93\x05\xf9\xe1\x74\x78\xa4\x78\xae\x75\x44\x33\xde\xa7\xe9\xb3\xb7\x09\x37\x69\x01\x59\x99\xa1\xb9\x67\xc7\x47\xe4\x5d\xd3\x6c\x6f\x4c\x5d\xc2\xed\x03\xe6\x97\x50\xa3\x2d\x3c\xa1\x8a\xe9\xd8\xb1\x82\xb6\x4a\x57\x98\x86\xbe\x22\x41\x6d\x18\x70\xea\xc2\x66\x73\xe9\xfb\xa1\x17\x84\x43\xa1\x7b\x42\x1e\xae\x95\x3b\x90\x47\x37\x66\xf2\x38\x6a\xd6\xd3\xe1\x05\x0f\x01\x1d\xec\xcc\x6d\xa5\xb2\x03\xd1\x75\x22\xcd\x0b\x6c\x0f\xcc\x51\x4a\x45\x37\x83\x1b\x1f\x97\xcc\x9f\xd0\x30\x1d\xc1\x7b\x7b\x67\xdd\xc7\xc3\x71\x25\x82\xbd\xfc\xf4\xd0\x24\xed\x95\x09\xf1\x7f\x71\x85\xeb\x40\xd5\x4f\x8f\xb1\x9d\x15\x57\x24\xb9\x5f\x3a\xbb\x76\xcf\xa7\x7f\x6d\xb1\xc1\xee\xdf\xed\xfc\xea\x99\xdd\xe3\x2b\xac\x2f\x5f\x63\x35\xd9\x2b\x85\x0f\xe5\x3e\x28\x3a\x5b\x99\x36\x2e\x39\xfe\x15\xa8\x31\x88\x0f\x39\x2f\x58\x9c\x4f\x83\x72\x75\x13\xa6\x8f\x3f\x3d\x9d\x01\x6d\x41\xc2\xa7\xcf\xa3\x7f\x02\x00\x00\xff\xff\xc5\x26\x68\xc2\xc0\x11\x00\x00")

func chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYamlBytes() ([]byte, error) {
	return bindataRead(
		_chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYaml,
		"chart/crds/network.harvesterhci.io_virtualmachinenetworkconfigs.yaml",
	)
}

func chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYaml() (*asset, error) {
	bytes, err := chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chart/crds/network.harvesterhci.io_virtualmachinenetworkconfigs.yaml", size: 4544, mode: os.FileMode(420), modTime: time.Unix(1708939633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chart/crds/network.harvesterhci.io_ippools.yaml":                      chartCrdsNetworkHarvesterhciIo_ippoolsYaml,
	"chart/crds/network.harvesterhci.io_virtualmachinenetworkconfigs.yaml": chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chart": &bintree{nil, map[string]*bintree{
		"crds": &bintree{nil, map[string]*bintree{
			"network.harvesterhci.io_ippools.yaml":                      &bintree{chartCrdsNetworkHarvesterhciIo_ippoolsYaml, map[string]*bintree{}},
			"network.harvesterhci.io_virtualmachinenetworkconfigs.yaml": &bintree{chartCrdsNetworkHarvesterhciIo_virtualmachinenetworkconfigsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
