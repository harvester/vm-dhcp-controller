# Default values for harvester-vm-dhcp-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: rancher/harvester-vm-dhcp-controller
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "main-head"

# Agent configuration
agent:
  enabled: true # Controls whether agent deployment and related resources are created
  replicaCount: 2
  image:
    repository: rancher/harvester-vm-dhcp-agent # Specific agent image
    pullPolicy: IfNotPresent
    tag: "main-head" # Or specific version for agent
  # Flag to disable leader election within the agent pods
  noLeaderElection: false
  serviceAccount:
    # Specifies whether a service account should be created for the agent
    create: true
    # Annotations to add to the agent service account
    annotations: {}
    # The name of the service account to use for the agent.
    # If not set and create is true, a name is generated using the fullname template + "-agent"
    name: ""
  rbac:
    # Specifies whether RBAC resources (ClusterRole, ClusterRoleBinding) should be created for the agent
    create: true
  # Pod security context for agent pods
  podSecurityContext: {}
  # Security context for agent containers
  securityContext: {}
  # Resources requests and limits for agent pods
  resources: {}
  # Node selector, affinity, tolerations for agent pods
  nodeSelector: {}
  affinity: {}
  tolerations: []

webhook:
  replicaCount: 1
  image:
    repository: rancher/harvester-vm-dhcp-webhook
    pullPolicy: IfNotPresent
    tag: "main-head"
  httpsPort: 8443
  service:
    type: ClusterIP
    port: 443
  resources: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  metricsPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
